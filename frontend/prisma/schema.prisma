datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider     = "prisma-client"
  output       = "./generated"
  moduleFormat = "esm"
}

model Tag {
  id       String    @id @default(nanoid())
  name     String    @unique
  users    User[]
  projects Project[]

  @@index(fields: [name])
}

model User {
  id         String  @id @default(nanoid())
  keycloakId String  @unique
  username   String  @unique
  firstName  String?
  lastName   String?

  image       String?
  description String?

  registrationDate DateTime

  phoneNumber                 String?
  contactEmailAddress         String?
  isContactEmailAddressPublic Boolean @default(false)

  tags           Tag[]
  ownedProjects  Project[] @relation("projectOwners")
  memberProjects Project[] @relation("projectMembers")

  setupCompleted Boolean @default(false)
  roles          Role[]

  s3ObjectImage     S3Object?  @relation("imageOfUser")
  s3ObjectsUploaded S3Object[] @relation("uploadedBy")

  @@index(fields: [username, keycloakId])
}

model Attachment {
  id           String   @id @default(nanoid())
  type         String // enums not supported with sqlite. see AttachmentType in fake-data-generators.ts
  url          String
  text         String
  creationDate DateTime

  project       Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String?
  projectStep   ProjectStep? @relation(fields: [projectStepId], references: [id], onDelete: Cascade)
  projectStepId String?
  s3Object      S3Object?

  @@index(fields: [projectId, projectStepId])
}

model Project {
  id String @id @default(nanoid())

  title       String
  description String
  mainImage   String?

  owners      User[]            @relation("projectOwners")
  members     User[]            @relation("projectMembers")
  tags        Tag[]
  attachments Attachment[]
  steps       ProjectStep[]
  metadata    ProjectMetadata[]

  creationDate           DateTime
  latestModificationDate DateTime

  needsProjectArea Boolean
  s3Object         S3Object?

  @@index(fields: [title, description])
}

model ProjectStep {
  id String @id @default(nanoid())

  creationDate           DateTime
  latestModificationDate DateTime

  attachments Attachment[]
  description String

  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?

  @@index(fields: [projectId])
}

model Role {
  id String @id @default(nanoid())

  title String @unique

  users User[]
}

model KeyValue {
  id String @id @default(nanoid())

  key   String @unique
  value String
}

model MetadataType {
  id       String @id @default(nanoid())
  name     String @unique // e.g., "cost", "materials", "time_invested"
  dataType String // e.g., "float", "int", "boolean", "text"

  values       ProjectMetadata[]
  translations MetadataTypeTranslation[]

  @@index(fields: [name])
}

model MetadataTypeTranslation {
  id          String  @id @default(nanoid())
  language    String // e.g., "en", "de"
  displayName String // e.g., "Cost", "Kosten"
  description String // e.g., "Cost of the project rounded to the nearest euro", "Kosten des Projekts auf die n√§chste Euro gerundet"
  unit        String? // e.g., "hours", "Stunden"

  metadataType   MetadataType @relation(fields: [metadataTypeId], references: [id], onDelete: Cascade)
  metadataTypeId String

  @@unique([metadataTypeId, language]) // One translation per language per metadata type
  @@index(fields: [language, metadataTypeId])
}

model ProjectMetadata {
  id             String       @id @default(nanoid())
  value          String // The actual metadata value
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      String
  metadataType   MetadataType @relation(fields: [metadataTypeId], references: [id], onDelete: Cascade)
  metadataTypeId String

  @@unique([projectId, metadataTypeId]) // One value per metadata type per project
  @@index(fields: [projectId])
  @@index(fields: [metadataTypeId])
}

model S3Object {
  id        String  @id @default(nanoid())
  key       String  @unique
  bucket    String
  status    String  @default("pending") // pending, uploading, uploaded, orphaned
  url       String?
  publicUrl String? @unique

  uploadedAt   DateTime @default(now())
  uploadedBy   User?    @relation(fields: [uploadedById], references: [id], onDelete: SetNull, name: "uploadedBy")
  uploadedById String?

  attachment   Attachment? @relation(fields: [attachmentId], references: [id], onDelete: SetNull)
  attachmentId String?     @unique

  mainImageIn          Project? @relation(fields: [mainImageInProjectId], references: [id], onDelete: SetNull)
  mainImageInProjectId String?  @unique

  imageOfUser   User?   @relation(fields: [imageOfUserId], references: [id], onDelete: SetNull, name: "imageOfUser")
  imageOfUserId String? @unique

  @@index(fields: [status])
  @@index(fields: [publicUrl])
}
